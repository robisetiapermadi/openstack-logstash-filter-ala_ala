  filter {

      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:[system][timestamp]}"}
      }


      # set timestamp
      date {
        match => [ "[system][timestamp]" , "ISO8601" ]
      }


      if [fields][log_type] == "system.syslog" {
        mutate {
          add_tag => [ "syslog" ]
        }
    
      }

      if [fields][log_type] == "system.auth" {
        mutate {
          add_tag => [ "auth" ]
        }

        # get program name/pid
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:temp} %{SYSLOGHOST:temp} %{DATA:[system][program]}?(\[%{POSINT:[system][pid]}\])?:"}
          remove_field => [ "temp" ]
        }

        if [system][program] =="sshd"{
            grok {
              patterns_dir   => ["etc/logstash/patterns.d"]
              match => { "message" => "%{SSH_AUTH_SUCCESS}" }
              add_field => { "[system][auth][result]" => "success" "[system][auth][type]" => "login" }
              #add_tag => [ "_grok_sshd_success", "matched" ]
              remove_field => [ "temp" ]
            }
            grok {
              patterns_dir   => ["etc/logstash/patterns.d"]
              match => { "message" => "%{SSH_AUTHFAIL_WRONGCREDS}" }
              add_field => { "[system][auth][result]" => "fail" "[system][auth][fail][reason]" => "wrong_credentials" "[system][auth][type]" => "login" }
              #add_tag => [ "_grok_sshd_success", "matched" ]
            }
            grok {
              patterns_dir   => ["etc/logstash/patterns.d"]
              match => { "message" => "%{SSH_AUTHFAIL_WRONGUSER}" }
              add_field => { "[system][auth][result]" => "fail" "[system][auth][fail][reason]" => "unknown_user" "[system][auth][type]" => "login" }
              #add_tag => [ "_grok_sshd_success", "matched" ]
            }
            grok {
              patterns_dir   => ["etc/logstash/patterns.d"]
              match => { "message" => "%{SSH_DISCONNECT}" }
              add_field => { "[system][auth][result]" => "success" "[system][auth][type]" => "logout" }
              add_tag => [ "_grok_sshd_success", "matched", "ssh_disconnect" ]
              remove_field => [ "temp" ]
            }
            mutate {
              remove_tag => [ "matched", "_grokparsefailure" ]
            }

            geoip {
		          source => "[system][auth][ip]"
              #add_field => [ "[geoip][location]", "%{[geoip][longitude]}" ]
              #add_field => [ "[geoip][location]", "%{[geoip][latitude]}"  ]
	          }
        }

        if [system][program] == "sudo" {
	        grok {
		        patterns_dir   => ["etc/logstash/patterns.d"]
		        match => { "message" => "%{SUDO}" }
		        add_tag => [ "_grok_sudo_success" ]
	        }
	      }

        if [system][program] == "su" {
	        grok {
		        patterns_dir   => ["etc/logstash/patterns.d"]
		        match => { "message" => "%{SU}" }
		        add_tag => [ "_grok_su_success" ]
	        }
	      }

        if [system][program] == "systemd-logind" {
	        grok {
		        patterns_dir   => ["etc/logstash/patterns.d"]
		        match => { "message" => "%{SYSTEMD_LOGIND}" }
		        add_tag => [ "_grok_systemd_logind_success" ]
	        }
	      }

        if [system][program] in [ "useradd", "groupadd" ] {
	        grok {
		        patterns_dir   =>["etc/logstash/patterns.d"]
            match => { "message" => "%{ACCOUNT_ADD}" }
            add_field => { "account_action" => "create" }
            add_tag => [ "_grok_new_account_success" ]
	        }
          if [account_kvdata] {
            mutate {
              gsub => [ "account_kvdata", ", ", '|' ]
            }
            kv {
              source => "account_kvdata"
              prefix => "account_"
              field_split => "|"
            }
            mutate {
              remove_field => [ "account_kvdata" ]
            }
          }
	      }


      # end system.auth type
      }
  }