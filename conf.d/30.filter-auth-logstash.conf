  filter {

      if [fields][log_type] == "system.syslog" {
          grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:[system][timestamp]}"}
        }


        # set timestamp
        ruby {
          path => "/etc/logstash/rubyfilter/precision-timestamp-parse.logstash-filter-ruby.rb"
          script_params => {
            source => "[system][timestamp]"
            format => ["ISO8601"]
          }
        }
        mutate {
          add_tag => [ "syslog" ]
        }
    
      }

      if [fields][log_type] == "system.auth" {
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:[system][timestamp]}"}
        }

        ruby {
          path => "/etc/logstash/rubyfilter/precision-timestamp-parse.logstash-filter-ruby.rb"
          script_params => {
            source => "[system][timestamp]"
            format => ["ISO8601"]
          }
        }

        mutate {
          add_tag => [ "auth" ]
        }

        # get program name/pid
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:temp} %{SYSLOGHOST:temp} %{DATA:[system][program]}?(\[%{POSINT:[system][pid]}\])?:"}
          remove_field => [ "temp" ]
        }

        if [system][program] =="sshd"{
            grok {
              patterns_dir   => ["etc/logstash/patterns.d"]
              match => { "message" => "%{SSH_AUTH_SUCCESS}" }
              add_field => { "[system][auth][result]" => "success" "[system][auth][type]" => "login" }
              #add_tag => [ "_grok_sshd_success", "matched" ]
              remove_field => [ "temp" ]
            }
            grok {
              patterns_dir   => ["etc/logstash/patterns.d"]
              match => { "message" => "%{SSH_AUTHFAIL_WRONGCREDS}" }
              add_field => { "[system][auth][result]" => "fail" "[system][auth][fail][reason]" => "wrong_credentials" "[system][auth][type]" => "login" }
              #add_tag => [ "_grok_sshd_success", "matched" ]
            }
            grok {
              patterns_dir   => ["etc/logstash/patterns.d"]
              match => { "message" => "%{SSH_AUTHFAIL_WRONGUSER}" }
              add_field => { "[system][auth][result]" => "fail" "[system][auth][fail][reason]" => "unknown_user" "[system][auth][type]" => "login" }
              #add_tag => [ "_grok_sshd_success", "matched" ]
            }
            grok {
              patterns_dir   => ["etc/logstash/patterns.d"]
              match => { "message" => "%{SSH_DISCONNECT}" }
              add_field => { "[system][auth][result]" => "success" "[system][auth][type]" => "logout" }
              add_tag => [ "_grok_sshd_success", "matched", "ssh_disconnect" ]
              remove_field => [ "temp" ]
            }
            mutate {
              remove_tag => [ "matched", "_grokparsefailure" ]
            }

            geoip {
		          source => "[system][auth][ip]"
              #add_field => [ "[geoip][location]", "%{[geoip][longitude]}" ]
              #add_field => [ "[geoip][location]", "%{[geoip][latitude]}"  ]
	          }
        }

        if [system][program] == "sudo" {
	        grok {
		        patterns_dir   => ["etc/logstash/patterns.d"]
		        match => { "message" => "%{SUDO}" }
		        add_tag => [ "_grok_sudo_success" ]
	        }
	      }

        if [system][program] == "su" {
	        grok {
		        patterns_dir   => ["etc/logstash/patterns.d"]
		        match => { "message" => "%{SU}" }
		        add_tag => [ "_grok_su_success" ]
	        }
	      }

        if [system][program] == "systemd-logind" {
	        grok {
		        patterns_dir   => ["etc/logstash/patterns.d"]
		        match => { "message" => "%{SYSTEMD_LOGIND}" }
		        add_tag => [ "_grok_systemd_logind_success" ]
	        }
	      }

        if [system][program] in [ "useradd", "groupadd" ] {
	        grok {
		        patterns_dir   =>["etc/logstash/patterns.d"]
            match => { "message" => "%{ACCOUNT_ADD}" }
            add_field => { "[system][user_management][account][action]" => "create" }
            add_tag => [ "_grok_new_account_success" ]
	        }
          if [system][user_management][account][kvdata]{
            mutate {
              gsub => [ "[system][user_management][account][kvdata]", ", ", '|' ]
            }
            kv {
              source => "[system][user_management][account][kvdata]"
              target => "[system][user_management][account][data]"
              field_split => "|"
            }
            mutate {

              remove_field => [ "[system][user_management][account][kvdata]" ]
            }
          }
	      }


        if [system][program] == "usermod" {
          grok {
            patterns_dir   => ["etc/logstash/patterns.d"]
            match => { "message" => "%{USERMOD}" }
            add_tag => [ "_grok_usermod_success" ]
          }
        }

        if [system][program] == "userdel" {
          grok {
            patterns_dir   => ["etc/logstash/patterns.d"]
            match => { "message" => "%{USERDEL}" }
            add_tag => [ "_grok_userdel_success" ]
          }
          mutate {
            gsub => [ "[system][user_management][account][action]", "remove", "delete" ]
          }
        }

        if [system][program] == "groupdel" {
            grok {
              patterns_dir   => ["etc/logstash/patterns.d"]
              match => { "message" => "%{GROUPDEL}" }
              add_field => { "[system][user_management][account][action]" => "delete" }
              add_tag => [ "_grok_groupdel_success" ]
            }
        }


      # end system.auth type
      }

      if [fields][log_type] == "openstack.cinder.api" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}?"}
        }

        mutate {
          add_field => { "[system][timestamp]" => "%{tahun}-%{bulan}-%{tanggal}T%{jam}:%{menit}:%{detik}+07:00" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }


        # set timestamp 2021-12-06 12:23:44.527976
        ruby {
          path => "/etc/logstash/rubyfilter/precision-timestamp-parse.logstash-filter-ruby.rb"
          script_params => {
            source => "[system][timestamp]"
            format => ["ISO8601"]
          }
        }
        mutate {
          add_tag => [ "cinder" ]
        }
    
      }

      if [fields][log_type] == "openstack.cinder.wsgi" {
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA}\] %{DATA:http_method} %{URI:uri}" }
            add_tag => [ "request" ]
          }
        }

        if "request" not in [tags] {
          grok {
            match => { "message" => "\[%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA}\] %{GREEDYDATA:response}" }
            add_tag => [ "response" ]
          }
        }

        date {
          match => [ "timestamp", "ISO8601" ]
        }

        mutate {
          add_tag => [ "cinder" ]
        }
    
      }

      if [fields][log_type] == "openstack.cinder.backup" {
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        date {
          match => [ "timestamp", "ISO8601" ]
        }

        mutate {
          add_tag => [ "cinder" ]
        }
    
      }

      if [fields][log_type] == "openstack.cinder.scheduler" {
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        date {
          match => [ "timestamp", "ISO8601" ]
        }

        mutate {
          add_tag => [ "cinder" ]
        }
    
      }

      if [fields][log_type] == "openstack.cinder.volume" {
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        date {
          match => [ "timestamp", "ISO8601" ]
        }

        mutate {
          add_tag => [ "cinder" ]
        }
    
      }

      if [fields][log_type] == "openstack.glance.api" {
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        date {
          match => [ "timestamp", "ISO8601" ]
        }

        mutate {
          add_tag => [ "cinder" ]
        }
    
      }

      if [fields][log_type] == "openstack.haproxy" {
        json {
          source => "message"
        }

        mutate {
          replace => { "message" => "%{Payload}" }
          remove_field => [ "Payload" ]
        }

        grok {
          match => { "message" => ": %{GREEDYDATA:event}"}
        }

        grok {
          match => { "event" => "%{IP:clientip}:%{NUMBER:clientport} \[%{MONTHDAY:tanggal}/%{MONTH:bulan}/%{YEAR:tahun}:%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})"}
          
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+07:00" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MMM-dd HH:mm:ss.SSSZ"]
        }

    
      }

      if [fields][log_type] == "openstack.heat.api" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }

      if [fields][log_type] == "openstack.heat.engine" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }

      if [fields][log_type] == "openstack.horizon.access" {
        grok {
          match => { "message" => "%{IPORHOST:remote_ip} - %{DATA:user_name} \[%{HTTPDATE:access_time}\] \"%{WORD:http_method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{DATA:response_code} %{DATA:body_sent_bytes} %{DATA} \"%{DATA:referrer}\" \"%{DATA:user_agent}\""}
        }

        date {
          match => [ "access_time", "dd/MMM/yyyy:HH:mm:ss Z" ]
        }

        mutate {
          add_tag => [ "cinder" ]
        }
    
      }


      if [fields][log_type] == "openstack.horizon" {
        grok {
          match => { "message" => "\[%{DAY} %{MONTH:bulan} %{MONTHDAY:tanggal} %{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik}) %{YEAR:tahun}\] \[%{NOTSPACE:log_level}\] \[%{GREEDYDATA}\] \[%{WORD} %{IP:ip}:%{NUMBER:port}\] ?(%{GREEDYDATA:event})?"}
        }
        
        # 2021-12-07T15:42:41.792348+07:00
        translate{
          exact => true
          regex => true
          dictionary => [
              "Jan","01",
              "Feb","02",
              "Mar","03",
              "Apr","04",
              "May","05",
              "Jun","06",
              "Jul","07",
              "Aug","08",
              "Sep","09",
              "Oct","10",
              "Nov","11",
              "Dec","12"
          ]
          field => "bulan"
          destination => "bulan_tmp"
        }

        grok {
          match => { "event" => "Login %{DATA:result} for user \"%{USERNAME:user}\" using domain \"%{DATA:domain}\", remote address %{IP:clientip}." }
          add_field => { "auth_type" => "login" }
        }


        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan_tmp}-%{tanggal}T%{jam}:%{menit}:%{detik}+07:00" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" , "bulan_tmp" ]
        }

        ruby {
          path => "/etc/logstash/rubyfilter/precision-timestamp-parse.logstash-filter-ruby.rb"
          script_params => {
            source => "accesstime"
            format => ["ISO8601"]
          }
        }

    
      }


      if [fields][log_type] == "openstack.keystone" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }


        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }

      if [fields][log_type] == "openstack.neutron.dnsmasq" {
        grok {
          match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGPROG}: ?(%{GREEDYDATA:event})?"}
        }

        date {
          match => [ "timestamp" , "MMM dd HH:mm:ss"]
          remove_field => [ "timestamp" ]
        }

    
      }
      
      
      if [fields][log_type] == "openstack.neutron.dhcp.agent" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }


      if [fields][log_type] == "openstack.neutron.metadata.agent" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }

      if [fields][log_type] == "openstack.neutron.openvswitch.agent" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }


      if [fields][log_type] == "openstack.neutron.l3.agent" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }


      if [fields][log_type] == "openstack.neutron.server" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }


      if [fields][log_type] == "openstack.nova.api" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }

      if [fields][log_type] == "openstack.nova.conductor" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }


      if [fields][log_type] == "openstack.nova.manage" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }

      if [fields][log_type] == "openstack.nova.novncproxy" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }
        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }


      if [fields][log_type] == "openstack.nova.scheduler" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }

      if [fields][log_type] == "openstack.ovs.vswitchd" {
        dissect {
          mapping => { "message" => "%{timestamp}|%{line}|%{proccess}|%{log_level}|%{event}"}
        }

        date {
          match => [ "timestamp" , "ISO8601"]
        }

    
      }

      if [fields][log_type] == "openstack.ovsdb.server" {
        dissect {
          mapping => { "message" => "%{timestamp}|%{line}|%{proccess}|%{log_level}|%{event}"}
        }

        date {
          match => [ "timestamp" , "ISO8601"]
        }

    
      }


      if [fields][log_type] == "openstack.placement.api" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }

        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }

      if [fields][log_type] == "openstack.libvirt.libvirtd" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}?: %{NUMBER}: %{LOGLEVEL:log_level} : %{GREEDYDATA:event}"}
        }

        mutate {
          add_field => { "timestamp" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}%{timezone}" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" , "timezone"]
        }

        date {
          match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }


      if [fields][log_type] == "openstack.nova.compute" {
        grok {
          match => { "message" => "%{YEAR:tahun}-%{MONTHNUM:bulan}-%{MONTHDAY:tanggal}[T ]%{HOUR:jam}:?%{MINUTE:menit}(?::?%{SECOND:detik})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER} %{LOGLEVEL:log_level} %{NOTSPACE:api} ?(%{GREEDYDATA:event})?"}
        }
        if "multiline" not in [log][flags]{
          grok {
            match => { "event" => "\[?(%{DATA:req_id} %{DATA:user_id} %{DATA:project_id} %{DATA} %{DATA} %{DATA})?\] %{GREEDYDATA:event_message}"}
          }
        }

        mutate {
          add_field => { "accesstime" => "%{tahun}-%{bulan}-%{tanggal} %{jam}:%{menit}:%{detik}+0700" }
          remove_field => [ "tahun", "bulan", "tanggal", "jam", "menit", "detik" ]
        }

        date {
          match => [ "accesstime" , "yyyy-MM-dd HH:mm:ss.SSSZ"]
        }

    
      }


  }